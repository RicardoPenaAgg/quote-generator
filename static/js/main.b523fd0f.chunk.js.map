{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","quoteData","setQuoteData","getQuote","a","fetch","json","updateQuote","then","quote","useEffect","encodedQuote","encodeURIComponent","content","author","id","onClick","title","target","href","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAAe,I,YCsCAA,MAnCf,WAAgB,IAAD,EACoBC,IAAMC,SAAS,IADnC,mBACNC,EADM,KACIC,EADJ,KAEPC,EAAQ,uCAAE,4BAAAC,EAAA,sEACQC,MAAM,kCADd,cACVJ,EADU,yBAETA,EAAUK,QAFD,2CAAF,qDAKRC,EAAY,WAChBJ,IAAWK,MAAK,SAACC,GAASP,EAAaO,OAEzCV,IAAMW,UAAUH,EAAY,IAE5B,IAAMI,EAAeC,mBAAmBX,EAAUY,QAAU,QAAUZ,EAAUa,QAChF,OAEE,sBAAKC,GAAG,YAAR,UACM,qBAAKA,GAAG,OAAR,SACKd,EAAUY,UAEf,sBAAKE,GAAG,SAAR,cACMd,EAAUa,UAId,wBAAQC,GAAG,YAAYC,QAAST,EAAhC,uBAEF,mBAAGQ,GAAG,cAAcE,MAAM,eAAeC,OAAO,SAASC,KAAI,gDAA2CR,GAAxG,SACE,+BAAM,qBAAKS,IAAI,mDAAmDC,IAAI,yBClBnEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b523fd0f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nfunction App() {\n  const [quoteData,setQuoteData] = React.useState({})\n  const getQuote= async ()=>{\n  const quoteData = await fetch(\"https://api.quotable.io/random\")\n  return quoteData.json()\n  }\n  \n  const updateQuote=()=>{\n    getQuote().then((quote)=>{setQuoteData(quote)})\n  }\n  React.useEffect(updateQuote,[])\n\n  const encodedQuote = encodeURIComponent(quoteData.content + \"\\n - \" + quoteData.author)// makes URL safe\n  return (\n   \n    <div id=\"quote-box\" >\n          <div id=\"text\">\n              {quoteData.content}\n          </div>\n          <div id=\"author\">\n              -{quoteData.author}\n          </div>\n          \n          \n            <button id=\"new-quote\" onClick={updateQuote}>New Quote</button>\n          \n          <a id=\"tweet-quote\" title=\"Tweet It Now\" target=\"_blank\" href={`https://twitter.com/intent/tweet?text=${encodedQuote}`}>\n            <span><img src=\"http://cdn.onlinewebfonts.com/svg/img_276960.png\" alt=\"twitter icon\"/></span>\n            </a>\n\n      \n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}